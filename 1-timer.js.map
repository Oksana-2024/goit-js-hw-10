{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate = new Date();\nconst button = document.querySelector('[data-start]');\nconst input = document.querySelector('#datetime-picker');\nlet intervalTimer = null;\n\nconst timer = () => {\n  if (Date.now() > userSelectedDate) {\n    input.disabled = false;\n    clearInterval(intervalTimer);\n    return;\n  }\n  const diffTimer = convertMs(userSelectedDate - Date.now());\n  for (const key in diffTimer) {\n    document.querySelector(`[data-${key}]`).textContent = addLeadingZero(\n      diffTimer[key]\n    );\n  }\n};\n\nbutton.addEventListener('click', () => {\n  button.disabled = true;\n  input.disabled = true;\n  timer();\n  intervalTimer = setInterval(timer, 1000);\n});\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    if (selectedDates[0].getTime() < Date.now()) {\n      iziToast.show({\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n        color: '#ef4040',\n        messageColor: '#fff',\n        theme: 'dark',\n      });\n      button.disabled = true;\n      return;\n    }\n    userSelectedDate = selectedDates[0];\n    button.disabled = false;\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  const string = value.toString();\n  return string.length < 2 ? string.padStart(2, '0') : string;\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(1024140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n"],"names":["userSelectedDate","button","input","intervalTimer","timer","diffTimer","convertMs","key","addLeadingZero","options","selectedDates","iziToast","flatpickr","ms","days","hours","minutes","seconds","value","string"],"mappings":"0IAMA,IAAIA,EAAmB,IAAI,KAC3B,MAAMC,EAAS,SAAS,cAAc,cAAc,EAC9CC,EAAQ,SAAS,cAAc,kBAAkB,EACvD,IAAIC,EAAgB,KAEpB,MAAMC,EAAQ,IAAM,CAClB,GAAI,KAAK,IAAK,EAAGJ,EAAkB,CACjCE,EAAM,SAAW,GACjB,cAAcC,CAAa,EAC3B,MACD,CACD,MAAME,EAAYC,EAAUN,EAAmB,KAAK,IAAK,CAAA,EACzD,UAAWO,KAAOF,EAChB,SAAS,cAAc,SAASE,CAAG,GAAG,EAAE,YAAcC,EACpDH,EAAUE,CAAG,CACnB,CAEA,EAEAN,EAAO,iBAAiB,QAAS,IAAM,CACrCA,EAAO,SAAW,GAClBC,EAAM,SAAW,GACjBE,IACAD,EAAgB,YAAYC,EAAO,GAAI,CACzC,CAAC,EAED,MAAMK,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErB,GADA,QAAQ,IAAIA,EAAc,CAAC,CAAC,EACxBA,EAAc,CAAC,EAAE,QAAO,EAAK,KAAK,MAAO,CAC3CC,EAAS,KAAK,CACZ,QAAS,qCACT,SAAU,WACV,MAAO,UACP,aAAc,OACd,MAAO,MACf,CAAO,EACDV,EAAO,SAAW,GAClB,MACD,CACDD,EAAmBU,EAAc,CAAC,EAClCT,EAAO,SAAW,EACnB,CACH,EAEAW,EAAU,mBAAoBH,CAAO,EAErC,SAASH,EAAUO,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAAST,EAAeU,EAAO,CAC7B,MAAMC,EAASD,EAAM,WACrB,OAAOC,EAAO,OAAS,EAAIA,EAAO,SAAS,EAAG,GAAG,EAAIA,CACvD,CAEA,QAAQ,IAAIb,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,QAAU,CAAC"}